apiVersion: apps/v1
kind: Deployment
metadata:
  name: be-deployment
  labels:
    app.kubernetes.io/name: be-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      component: be
  template:
    metadata:
      labels:
        component: be
        test-key: test-label
    spec:
      # securityContext:
      #   runAsUser: 1001
      #   runAsGroup: 1001
      #   fsGroup: 1001
      restartPolicy: Always
      containers:
        - name: client
          image: mh184/k8s:complex-be
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: db-config-map
              prefix: POSTGRES_
            - configMapRef:
                name: be-config-map
            - secretRef:
                name: db-secret
              prefix: POSTGRES_
          env:
            - name: DATABASE_URL
              value: postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DB)?schema=public
            # - name: APP_NAME
            #   valueFrom:
            #     configMapKeyRef:
            #       name: db-config-map
            #       key: app_name
            # - name: PASSWORD
            #   valueFrom:
            #     secretKeyRef:
            #       name: db-config-map
            #       key: PASSWORD
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 512Mi
          livenessProbe: # restart when not ready
            # dùng để đảm bảo app alive
            # dùng cho trường hợp pod bị deadlock, không thể serve request nhưng vẫn running
            httpGet:
              path: /health/liveness
              port: be-port
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 30
            failureThreshold: 1
          readinessProbe: # does not receive traffic through Kubernetes Services when not ready
            # dùng để đảm bảo app ready để nhận traffic, vd như đã connect được với DB, đã migrate thành công, đã load xong config, ...
            httpGet:
              path: /health/readiness
              port: be-port
            initialDelaySeconds: 10
            timeoutSeconds: 2
            successThreshold: 3
          # startupProbe: # probe này sẽ chạy trước livenessProbe và readinessProbe
            # có thể dùng initialDelaySeconds để thay thế
            # thường dùng cho app khởi động lâu, khó predict thời gian khởi động
          #   httpGet:
          #     path: /healthz
          #     port: be-port
          #   failureThreshold: 30
          #   periodSeconds: 10
          ports:
            # Chỉ để tài liệu hóa cấu hình của pod, các container trong pod vẫn
            # có thể giao tiếp với nhau mà không cần cấu hình này
            # Trick: dùng làm port variable để dùng lại ở nhiều chỗ khác => lúc này nên cấu hình đúng vì nó
            # được dùng lại ở chỗ khác
            - containerPort: 3000
              name: be-port # phải unique trong pod => nên set là pod-port cho all deployment
          # volumeMounts:
          #   - name: config    # must match the Name of a Volume
          #     mountPath: '/app/storage/introduction.txt'  # content của subPath sẽ được mount vào path này trong container
          #     subPath: introduction.txt   # dùng path này trong volume
          # nếu dùng subPath thì không có update "realtime" vào trong container khi apply ConfigMap mà phải restart lại
          #     readOnly: true
          #   - name: secret
          #     mountPath: '/app/storage/secret.txt'
          #     subPath: secret.txt
          #     readOnly: true
          # volumes:
          #   # Volume with ConfigMap
          #   - name: config
          #     configMap:
          #       name: myapp-config
          #       items:
          #         - key: 'introduction.txt' # phải là key in ConfigMap
          #           path: 'introduction.txt'  # content của key sẽ được mount vào path này trong volume
          #   # Volume with Secret
          #   - name: secret
          #     secret:
          #       secretName: myapp-secret
          #       items:
          #         - key: secret.txt
          #           path: secret.txt
#
#
#
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: MYAPP
#   namespace: default
#   labels:
#     app: MYAPP
# spec:
#   selector:
#     matchLabels:
#       app: MYAPP
#   replicas: 1
#   strategy:
#     rollingUpdate:
#       maxSurge: 25%
#       maxUnavailable: 25%
#     type: RollingUpdate
#   template:
#     metadata:
#       labels:
#         app: MYAPP
#     spec:
#       # initContainers:
#       # Init containers are exactly like regular containers, except:
#       # - Init containers always run to completion.
#       # - Each init container must complete successfully before the next one starts.
#       containers:
#         - name: MYAPP
#           image: MYAPP:latest
#           resources:
#             requests:
#               cpu: 100m
#               memory: 100Mi
#             limits:
#               cpu: 100m
#               memory: 100Mi
#           livenessProbe:
#             tcpSocket:
#               port: 80
#             initialDelaySeconds: 5
#             timeoutSeconds: 5
#             successThreshold: 1
#             failureThreshold: 3
#             periodSeconds: 10
#           readinessProbe:
#             httpGet:
#               path: /_status/healthz
#               port: 80
#             initialDelaySeconds: 5
#             timeoutSeconds: 2
#             successThreshold: 1
#             failureThreshold: 3
#             periodSeconds: 10
#           env:
#             - name: DB_HOST
#               valueFrom:
#                 configMapKeyRef:
#                   name: MYAPP
#                   key: DB_HOST
#           ports:
#             - containerPort: 80
#               name: MYAPP
#           volumeMounts:
#             - name: localtime
#               mountPath: /etc/localtime
#       volumes:
#         - name: localtime
#           persistentVolumeClaim:
#             claimName: db-pvc
#       restartPolicy: Always
