apiVersion: apps/v1
kind: Deployment
metadata:
  name: be-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      component: be
  template:
    metadata:
      labels:
        component: be
        test-key: test-label
    spec:
      containers:
        - name: client
          image: complex-be
          imagePullPolicy: Never
          envFrom:
            - configMapRef:
                name: db-config-map
              prefix: POSTGRES_
            - configMapRef:
                name: be-config-map
            - secretRef:
                name: db-secret
              prefix: POSTGRES_
          env:
            - name: DATABASE_URL
              value: postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DB)?schema=public
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 512Mi
          ports:
            # Chỉ để tài liệu hóa cấu hình của pod, các container trong pod vẫn
            # có thể giao tiếp với nhau mà không cần cấu hình này
            - containerPort: 9999
#
#
#
#
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: MYAPP
#   namespace: default
#   labels:
#     app: MYAPP
# spec:
#   selector:
#     matchLabels:
#       app: MYAPP
#   replicas: 1
#   strategy:
#     rollingUpdate:
#       maxSurge: 25%
#       maxUnavailable: 25%
#     type: RollingUpdate
#   template:
#     metadata:
#       labels:
#         app: MYAPP
#     spec:
#       # initContainers:
#       # Init containers are exactly like regular containers, except:
#       # - Init containers always run to completion.
#       # - Each init container must complete successfully before the next one starts.
#       containers:
#         - name: MYAPP
#           image: MYAPP:latest
#           resources:
#             requests:
#               cpu: 100m
#               memory: 100Mi
#             limits:
#               cpu: 100m
#               memory: 100Mi
#           livenessProbe:
#             tcpSocket:
#               port: 80
#             initialDelaySeconds: 5
#             timeoutSeconds: 5
#             successThreshold: 1
#             failureThreshold: 3
#             periodSeconds: 10
#           readinessProbe:
#             httpGet:
#               path: /_status/healthz
#               port: 80
#             initialDelaySeconds: 5
#             timeoutSeconds: 2
#             successThreshold: 1
#             failureThreshold: 3
#             periodSeconds: 10
#           env:
#             - name: DB_HOST
#               valueFrom:
#                 configMapKeyRef:
#                   name: MYAPP
#                   key: DB_HOST
#           ports:
#             - containerPort: 80
#               name: MYAPP
#           volumeMounts:
#             - name: localtime
#               mountPath: /etc/localtime
#       volumes:
#         - name: localtime
#           persistentVolumeClaim:
#             claimName: db-pvc
#       restartPolicy: Always
