apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      component: db
  template:
    metadata:
      labels:
        component: db
    spec:
      containers:
        - name: postgres
          image: postgres:15
          # imagePullPolicy: Never
          ports:
            # Chỉ để tài liệu hóa cấu hình của pod, các container trong pod vẫn
            # có thể giao tiếp với nhau mà không cần cấu hình này
            - containerPort: 9999
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 512Mi
          envFrom:
            - configMapRef:
                name: db-config-map
              prefix: POSTGRES_
            - secretRef:
                name: db-secret
              prefix: POSTGRES_
          volumeMounts:
            - name: database-volume
              mountPath: /var/lib/postgresql/data
              subPath: postgres
              # readOnly: true  # nếu như ta muốn chỉ cho phép read ko write
          readinessProbe: # does not receive traffic through Kubernetes Services when not ready
            exec:
              command: ['sh', '-c', 'pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -q']
            initialDelaySeconds: 15
            timeoutSeconds: 2
          livenessProbe: # restart when not ready
            exec:
              command: ['sh', '-c', 'psql -w -U $POSTGRES_USER -d $POSTGRES_DB -c "SELECT 1"']
            initialDelaySeconds: 45
            timeoutSeconds: 2
      volumes:
        - name: database-volume
          persistentVolumeClaim:
            claimName: db-pvc
            # readOnly: true  # override readOnly ở volumeMounts
      restartPolicy: Always
#
#
#
#
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: MYAPP
#   namespace: default
#   labels:
#     app: MYAPP
# spec:
#   selector:
#     matchLabels:
#       app: MYAPP
#   replicas: 1
#   strategy:
#     rollingUpdate:
#       maxSurge: 25%
#       maxUnavailable: 25%
#     type: RollingUpdate
#   template:
#     metadata:
#       labels:
#         app: MYAPP
#     spec:
#       # initContainers:
#       # Init containers are exactly like regular containers, except:
#       # - Init containers always run to completion.
#       # - Each init container must complete successfully before the next one starts.
#       containers:
#         - name: MYAPP
#           image: MYAPP:latest
#           resources:
#             requests:
#               cpu: 100m
#               memory: 100Mi
#             limits:
#               cpu: 100m
#               memory: 100Mi
#           livenessProbe:
#             tcpSocket:
#               port: 80
#             initialDelaySeconds: 5
#             timeoutSeconds: 5
#             successThreshold: 1
#             failureThreshold: 3
#             periodSeconds: 10
#           readinessProbe:
#             httpGet:
#               path: /_status/healthz
#               port: 80
#             initialDelaySeconds: 5
#             timeoutSeconds: 2
#             successThreshold: 1
#             failureThreshold: 3
#             periodSeconds: 10
#           env:
#             - name: DB_HOST
#               valueFrom:
#                 configMapKeyRef:
#                   name: MYAPP
#                   key: DB_HOST
#           ports:
#             - containerPort: 80
#               name: MYAPP
#           volumeMounts:
#             - name: localtime
#               mountPath: /etc/localtime
#       volumes:
#         - name: localtime
#           persistentVolumeClaim:
#             claimName: db-pvc
#       restartPolicy: Always
